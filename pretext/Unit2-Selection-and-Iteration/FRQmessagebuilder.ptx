<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="FRQmessagebuilder">
  <title>FRQ 1 MessageBuilder with Loops and Strings</title><introduction>
    
 <idx>control structures</idx>
 <idx>free response</idx>
 <idx>FRQ</idx>

    <p>The AP exam’s first free response question (FRQ) is on Methods and Control Structures using expressions, Strings, loops, and if statements. Students will write two methods or one constructor and one method of a given class based on provided specifications and examples. In Part A (4 points),the method or constructor will require students to write iterative or conditional statements, or both, as well as statements that call methods in the specified class. In Part B (3 points), the method or constructor will require calling <c>String</c> methods as of 2026. The AP exam provides the method header with some parameter variables and other methods that you will need to call in the solution. This question does not involve more complex topics such as arrays. </p>
    <p>FRQ Question 1 on Control Structures will probably involve:</p>
    <p>
      <ul>
            <li>
                <p>a <c>for</c> or <c>while</c> loop that probably uses the method’s parameter variables,</p>
            </li>
            <li>
                <p>an <c>if statement</c>, probably inside the loop,</p>
            </li>
            <li>
                <p>calls to other class <c>methods given to you</c>,</p>
            </li>
            <li>
                <p>a numerical or string value that is calculated by the loop and <c>returned</c> at the end of the method.</p>
            </li>
            <li>
                <p>Part A will require a loop and part B will require String methods (with or without a loop).</p>
            </li>
        </ul>
    </p>
    <p>On question 1, you will get points for:</p>
    <p>
      <ul>
            <li>
                <p>constructing the loop correctly,</p>
            </li>
            <li>
                <p>calling the correct methods,</p>
            </li>
            <li>
                <p>calculating the correct value,</p>
            </li>
            <li>
                <p>and returning the value.</p>
            </li>
        </ul>
    </p>
    <p>Try to have some code for each of these steps. Do not use arrays or other more complex code. You may need to use Math and String methods.</p>
  </introduction>
  <subsection xml:id="ced-frq-messagebuilder">
  <title>FRQ 1 MessageBuilder</title>

    <p>
      The following free response question is a great FRQ 1 example from page 168 of the <url href="https://apcentral.collegeboard.org/media/pdf/ap-computer-science-a-course-and-exam-description-effective-fall-2025.pdf" visual="https://apcentral.collegeboard.org/media/pdf/ap-computer-science-a-course-and-exam-description-effective-fall-2025.pdf">2025-2026 AP CSA Course and Exam Description</url>. </p>
        
    <p>
      This question involves the <c>MessageBuilder</c> class, which is used to generate a message
      based on a starting word. The <c>MessageBuilder</c> class contains a helper method,
      <c>getNextWord</c>. You will write a constructor and a method in the <c>MessageBuilder</c> class.
    </p>
            <program language="java"><code>
public class MessageBuilder
{
  private String message; // To be initialized in part (a)
  private int numWords;   // To be initialized in part (a)

  /**
   *  Builds a message starting with the word specified by the 
   *  parameter and counts the number of words in the message,
   *  as described in part (a)
   *  Precondition: startingWord is a single word with no spaces.
   */
  public MessageBuilder(String startingWord)
  { /* to be implemented in part (a) */ }

  /**
   * Returns a word to follow the word specified by the 
   * parameter or null if there are no remaining words.
   * Precondition: s is a single word with no spaces. 
   * Postcondition: Returns an individual word with no spaces.
   */
  public String getNextWord(String s)
  { /* implementation not shown */ }

  /**
   * Returns an abbreviation for the instance variable message,
   * as described in part (b)
   * Preconditions: Each word in message is separated by a single space.
   *                message contains two or more words.
   * Postcondition: message is unchanged.
   */
  public String getAbbreviation()
  { /* to be implemented in part (b) */ }

  /* There may be instance variables, constructors, and methods that are not shown. */
}
    </code></program>
  </subsection>

<subsection xml:id="parta-messagebuilder">
            <title>Part A: MessageBuilder Constructor</title>


    <p>
      In Part A, you will write the <c>MessageBuilder</c> constructor, which uses a helper method to create a message
      starting with the word specified by the parameter <c>startingWord</c> and assigns the message to
      the instance variable <c>message</c>. The constructor also counts the number of words in the message
      and assigns the count to the instance variable <c>numWords</c>.
    </p>
    <p>
      Each word in the message will be separated by a single space. A helper method, <c>getNextWord</c>,
      has been provided to obtain words to be added to the message. Each call to <c>getNextWord</c>
      returns the next word in the message based on the word most recently added. When there are no more
      words to be added, <c>getNextWord</c> returns <c>null</c>.
    </p>
  <subsubsection xml:id="example1-msgbldr">
  <title>Example 1</title>
  <p>
    Consider the following calls to <c>getNextWord</c>, which are made within the <c>MessageBuilder</c> class. The return value of each call is used in the next call.
  </p>

  <table>
    <tabular row-headers="yes">
      <col top="minor"/><col top="minor"/>
      <row header="yes" left="minor">
        <cell bottom="minor" right="minor">Method Call</cell>
        <cell bottom="minor" right="minor">Return Value</cell>
      </row>
      <row left="minor">
        <cell bottom="minor" right="minor"><c>getNextWord("the")</c></cell>
        <cell bottom="minor" right="minor"><c>"book"</c></cell>
      </row>
      <row left="minor">
        <cell bottom="minor" right="minor"><c>getNextWord("book")</c></cell>
        <cell bottom="minor" right="minor"><c>"on"</c></cell>
      </row>
      <row left="minor">
        <cell bottom="minor" right="minor"><c>getNextWord("on")</c></cell>
        <cell bottom="minor" right="minor"><c>"the"</c></cell>
      </row>
      <row left="minor">
        <cell bottom="minor" right="minor"><c>getNextWord("the")</c></cell>
        <cell bottom="minor" right="minor"><c>"table"</c></cell>
      </row>
      <row left="minor">
        <cell bottom="minor" right="minor"><c>getNextWord("table")</c></cell>
        <cell bottom="minor" right="minor"><c>null</c></cell>
      </row>
    </tabular>
  </table>

  <p>
    Based on these return values, a call to the <c>MessageBuilder</c> constructor with argument <c>"the"</c>
    should set the instance variable <c>message</c> to <c>"the book on the table"</c> and should set
    the instance variable <c>numWords</c> to <c>5</c>.
  </p>
</subsubsection>
<subsubsection xml:id="example2-msgbldr">
  <title>Example 2</title>
  <p>
    Now consider a different set of calls to <c>getNextWord</c>. Again, the return value of each call is used as input to the next.
  </p>

  <table>
    <tabular row-headers="yes">
      <col top="minor"/><col top="minor"/>
      <row header="yes" left="minor">
        <cell bottom="minor" right="minor">Method Call</cell>
        <cell bottom="minor" right="minor">Return Value</cell>
      </row>
      <row left="minor">
        <cell bottom="minor" right="minor"><c>getNextWord("good")</c></cell>
        <cell bottom="minor" right="minor"><c>"morning"</c></cell>
      </row>
      <row left="minor">
        <cell bottom="minor" right="minor"><c>getNextWord("morning")</c></cell>
        <cell bottom="minor" right="minor"><c>"sunshine"</c></cell>
      </row>
      <row left="minor">
        <cell bottom="minor" right="minor"><c>getNextWord("sunshine")</c></cell>
        <cell bottom="minor" right="minor"><c>null</c></cell>
      </row>
    </tabular>
  </table>

  <p>
    Based on this, a call to the <c>MessageBuilder</c> constructor with argument <c>"good"</c>
    should set <c>message</c> to <c>"good morning sunshine"</c> and <c>numWords</c> to <c>3</c>.
  </p>
</subsubsection>


    <subsubsection xml:id="how-to-solve-messagebuilder-a">
  <title>How to solve the MessageBuilder constructor</title>


  <p>Here are some exercises to help you to tackle this FRQ. First, identify and highlight the methods and variables that you must use in the problem.</p>
  <p>
    <ul>
      <li><p>The parameter <c>startingWord</c></p></li>
      <li><p>The helper method <c>getNextWord(String s)</c></p></li>
      <li><p>The instance variables <c>message</c> and <c>numWords</c></p></li>
    </ul>
  </p>

  <p>
    The constructor starts with <c>startingWord</c> and repeatedly adds the result of
    <c>getNextWord</c> until it returns <c>null</c>. Each word is separated by a space.
    You must also count how many words are in the message.
  </p>

  <p>
    You can declare a temporary variable such as <c>nextWord</c> as your loop variable to store the result of
    <c>getNextWord</c>, and update <c>message</c> and <c>numWords</c> in each loop iteration.
  </p>


  <p>Now let's plan the loop. The following questions will help guide your thinking.</p>

  <activity label="msgbuilder-loop-type">
    <statement>
      <p>Which loop structure is best suited to keep building the message until <c>getNextWord</c> returns <c>null</c>?</p>
    </statement>
    <choices>
      <choice>
        <statement><p>for loop with fixed number of iterations</p></statement>
        <feedback><p>The number of words is not known in advance, so a for loop with a fixed range won't work.</p></feedback>
      </choice>
      <choice correct="yes">
        <statement><p>while loop that continues until <c>getNextWord</c> returns <c>null</c></p></statement>
        <feedback><p>Correct. A while loop is appropriate because we don't know in advance how many words will be added.</p></feedback>
      </choice>
    </choices>
  </activity>

  <activity label="msgbuilder-variables">
    <statement>
      <p>What is the purpose of the variable <c>nextWord</c> in the loop?</p>
    </statement>
    <choices>
      <choice>
        <statement><p>It holds the entire message being built.</p></statement>
        <feedback><p>No, the <c>message</c> variable holds the full message. <c>nextWord</c> holds each new word temporarily.</p></feedback>
      </choice>
      <choice correct="yes">
        <statement><p>It stores the word returned by <c>getNextWord</c> in each iteration.</p></statement>
        <feedback><p>Correct. <c>nextWord</c> lets you keep track of the latest word returned before adding it to the message.</p></feedback>
      </choice>
      <choice>
        <statement><p>It counts how many words have been added.</p></statement>
        <feedback><p>No, that’s the purpose of the <c>numWords</c> variable.</p></feedback>
      </choice>
    </choices>
  </activity>

</subsubsection>


<subsubsection xml:id="msgbuilder-solve-part-a">
  <title>Solve MessageBuilder Part A</title>
    <p>
      Complete the <c>MessageBuilder</c> constructor.
    </p>

<activity label="FRQmessageBuilderPartA">
    <statement>
            <p> Complete the <c>MessageBuilder</c> constructor below that builds a message starting with the <c>startingWord</c> specified by the
     parameter using the given <c>getNextWord</c> method. The constructor should
            use a while loop to build the message and count 
            the number of words and save it in 
            the instance variable <c>numWords</c>. 
           </p>
      

    </statement>
    <program interactive="activecode" language="java">
      <code>
public class MessageBuilder
{
    private String message; // To be initialized in part (a)
    private int numWords;   // To be initialized in part (a)
  
    /**
    *  Part A: MessageBuilder(startingWord) constructor
    *  Builds a message starting with the word specified by the
    *  parameter and counts the number of words in the message,
    *  as described above.)
    *  Precondition: startingWord is a single word with no spaces.
    */    
    public MessageBuilder(String startingWord)
    {
        message = startingWord;
        numWords = 1; 
        
        // Complete the loop to build the message using the getNextWord method and increment numWords


    }
  
    /* These variables and methods were added for testing purposes  (not shown in AP exam)*/
    static String[] wordsForTesting = {"the", "book", "on", "the", "table"};
    static String[] wordsForTesting2 = {"good", "morning", "sunshine"};
    static int currentWordIndex = 0;
    
    public String getNextWord(String s)
    {
        if( !s.equals(wordsForTesting[currentWordIndex]) )
            throw new IllegalStateException("getNextWord called with wrong word");
        
        if(currentWordIndex &lt; wordsForTesting.length - 1)
        {
            currentWordIndex++;
            return wordsForTesting[currentWordIndex];
        }
        else
        {
            return null;
        }
      }
    public String getMessage()
    {
        return message;
    } 
    public int getNumWords()
    {
        return numWords;
    }
    public static void main(String[] args) 
    {
        MessageBuilder builder = new MessageBuilder("the");

        System.out.println("Message: " + builder.getMessage());
        System.out.println("Number of words: " + builder.getNumWords());

        // Test with the second set of words
        currentWordIndex = 0;
        wordsForTesting = wordsForTesting2;
        builder = new MessageBuilder("good");
        System.out.println("Message: " + builder.getMessage());
        System.out.println("Number of words: " + builder.getNumWords());
    }
  }
    </code>
    <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("MessageBuilder");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Message: the book on the table\nNumber of words: 5\nMessage: good morning sunshine\nNumber of words: 3\n";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
    
     @Test
        public void testWhile() {
          boolean passed = checkCodeContains("while loop","while");
         assertTrue(passed);
        }
        @Test
        public void testNumWords() {
          boolean passed = checkCodeContains("incrementing numWords","numWords+");
         assertTrue(passed);
        }
        @Test
        public void testNextWord() {
          boolean passed = checkCodeContains("call to getNextWord with the nextWord variable","getNextWord(nextWord)");
         assertTrue(passed);
        }

}
        </tests>
    </program>
</activity>
    
</subsubsection>
  </subsection>

<subsection xml:id="partb-messagebuilder">
  <title>Part B: getAbbreviation</title>
  <p>
    Starting in 2026, the AP exam will require students to use String methods in part B of FRQ 1.</p>
      
    <p>
    In MessageBuilder Part B, you are asked to write the <c>getAbbreviation</c> method, which returns an abbreviation consisting of the
      first letter of each word in <c>message</c>. Assume that <c>message</c> consists of
      two or more words, each separated by a single space.
    
      For example, if the value of <c>message</c> is <c>"as soon as possible"</c>,
      then <c>getAbbreviation()</c> should return <c>"asap"</c>.
    </p>

    <p>This method requires the use of arrays and the <c>String</c> <c>split</c> method covered in Unit 4. We have simplified this question to write a method that only returns the first letter of a single word. 
    </p>

<activity label="msgbuilder-string-methods">
  <statement>
    <p>Which of the following <code>String</code> methods can be used to return the first letter of a word? </p>
  </statement>
  <choices>
   <choice>
      <statement><p><code>length()</code></p></statement>
      <feedback><p>You do not need to know the length of a string to return its first letter.</p></feedback>
    </choice>
    <choice>
      <statement><p><code>indexOf(String s)</code></p></statement>
      <feedback><p>You do not need to know the index of a substring.</p></feedback>
    </choice>
    <choice correct="yes">
      <statement><p><code>substring(int start, int end)</code></p></statement>
      <feedback><p><code>substring</code> could be used to get the first letter of a string.</p></feedback>
    </choice>
    
    <choice>
      <statement><p><code>equals(String another)</code></p></statement>
      <feedback><p><code>equals</code> is used for comparisons, which are not needed for this method.</p></feedback>
    </choice>
    
 
  </choices>
</activity>


    <p>
      Complete the simplified <c>getAbbreviation(String word)</c> method below.
    </p>



    <activity label="FRQmessageBuilderPartB">
    <statement>
            <p> Complete the simplified <c>getAbbreviation(word)</c> method below that returns the first letter of the word parameter. This will be used to construct an abbreviation consisting of the first letter of each word in <c>message</c>. Assume that <c>message</c> consists of two or more words, each separated by a single space.
           </p>
    </statement>
    <program interactive="activecode" language="java">
      <code>
public class MessageBuilder
{
    private String message; 
    private int numWords;  
  
    /* Simplified constructor for testing */  
    public MessageBuilder(String m, int n)
    {
        message = m;
        numWords = n;
    }

    /* getAbbreviation(String) returns the first letter of the word parameter */
    public String getAbbreviation(String word)
    {
        // Complete the method to return the first letter of the word parameter
       
    }

    public String getMessage()
    {
        return message;
    } 
    public int getNumWords()
    {
        return numWords;
    }
    // Part B method for testing
    public String getAbbreviation()
    {
        String abbreviation = "";
        
        for(String word : message.split(" "))
            abbreviation += getAbbreviation(word);
        
        return abbreviation;
    }

    public static void main(String[] args) 
    {
        MessageBuilder builder = new MessageBuilder("as soon as possible", 4);
        System.out.println("Abbreviation for " + builder.getMessage() + " is " + builder.getAbbreviation());
        // Test with another message
        builder = new MessageBuilder("Java-coders are very awesome", 4);
        System.out.println("Abbreviation for " + builder.getMessage() + " is "  + builder.getAbbreviation());
    }
  }
    </code>
    <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("MessageBuilder");
    }

    @Test
    public void test1()
    {
        String output = getMethodOutput("main");
        String expect = "Abbreviation for as soon as possible is asap\nAbbreviation for Java-coders are very awesome is Java\n";

        boolean passed = getResults(expect, output, "Running main");
        assertTrue(passed);
    }
    
     @Test
        public void testSubstr() {
          boolean passed = checkCodeContains("substring","substring");
         assertTrue(passed);
        }
}
        </tests>
    </program>
</activity>
</subsection>
</section>
