<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-1-7-APIs-and-libraries">
  <title>
    APIs and Libraries 
    <image source="_static/45min.svg" />
  </title>

  <introduction>
    <idx>API</idx>
    <idx>library</idx>
    <idx>package</idx>
    <idx>class</idx>
    <idx>attribute</idx>
    <idx>method</idx>
    <idx>dot operator</idx>
    <idx>behavior</idx>
    <p>
      We have been using the <c>System.out.println()</c> method to print to the
      screen. This method is part of the Java <term>API (Application Programming
      Interface)</term>. A <term>method</term> is a block of code that performs
      a specific task. APIs are connected to <term>libraries</term> which are
      collections of classes written by other programmers that provide a set of
      methods that can be used to perform specific tasks. An API specification
      tells the programmer how to use those classes and methods.
    </p>

    <p>
      APIs and libraries are essential to programming because they allow you to
      use code that has already been written by others. This saves you time and
      allows you to focus on the specific task you are trying to accomplish.
    </p>

    <p>
      In Java, classes are grouped into packages. A <term>package</term> is a
      collection of related classes and interfaces (which are similar to
      classes) that can be <term>imported</term> into a program to be used. A
      package is like a folder of classes in a library’s file directory and is
      used to avoid name conflicts. Because classes that are used together are
      usually collected into the same packages, the terms library, API, and
      package are often used interchangeably in Java. But to be precise, a
      library is a collection of classes written by other programmers that you
      can use, the library's API describes how you use it, and the classes in
      the library are probably organized into one or more Java packages.
    </p>

    <p>
      Later on, we will learn to <c>import</c> other Java packages to use in our
      code, but first let's talk about a package that is always available in any
      Java program: <c>java.lang</c>.
    </p>
  </introduction>

  <subsection xml:id="java-lang-package">
    <title>java.lang Package</title>
    <p>
      The <c>java.lang</c> package contains classes and interfaces that are
      fundamental to the Java programming language, such as the <c>String</c>
      class and the <c>System</c> class which we use in
      <c>System.out.println</c>. Like all packages that are part of Java,
      <c>java.lang</c> is documented in <term>Javadocs</term>, online
      documentation of all the classes and interfaces in a package. Learning to
      navigate Javadocs is a key part of being a Java programmer.
    </p>

    <p>
      Take a look at the <url
      href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/package-summary.html">Javadocs
      for the <c>java.lang</c> package</url>. Can you find the documentation for
      the <c>System</c> class? Once you've found the Javadocs for <c>System</c>,
      see if you can find the documentation for the <c>static</c> field
      <c>out</c>. That should tell you that it is an instance of the class
      <c>PrintStream</c>. From there you can click on <c>PrintStream</c> to
      navigate to the <url
      href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/PrintStream.html"><c>PrintStream</c>
      Javadocs</url> to find documentation for the various versions of the
      <c>println()</c> method that we use to print to the screen. In fact you
      can see that there are a bunch of versions of <c>println</c> for printing
      different kinds of values.
    </p>

    <activity label="count-println">
      <statement>
        <p>
          How many <c>println()</c> methods are documented in the <url
          href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/PrintStream.html"><c>PrintStream</c>
          Javadocs</url>?
        </p>

        <p>
          <fillin mode="string" answer="10" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              <p>
                Correct. One for each for nine different argument types plus one
                that takes no arguments and just prints an end-of-line
                character.
              </p>
            </feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>
              <p>Only count the println methods, not print or printf methods.</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>

    <activity label="API_vocab_match">
      <statement>
        <p>
          Drag the definition from the left and drop it on the correct concept
          on the right. Click the "Check Me" button to see if you are correct.
        </p>
      </statement>

      <feedback>
        <p>Review the summaries above.</p>
      </feedback>

      <cardsort>
        <match>
          <premise order="1">A collection of classes written by other programmers</premise>
          <response>library</response>
        </match>

        <match>
          <premise order="2">
            A collection of related classes organized to be imported into your code
          </premise>

          <response>package</response>
        </match>

        <match>
          <premise order="3">
            A specification that tells the programmer how to use classes in a library
          </premise>

          <response>API</response>
        </match>

        <match>
          <premise order="4">The building blocks of Java and object-oriented programming</premise>
          <response>class</response>
        </match>

        <match>
          <premise order="5">A block of code that performs a specific task</premise>
          <response>method</response>
        </match>
      </cardsort>
    </activity>

    <activity label="purpose_apis">
      <statement>
        <p>What is the purpose of APIs and libraries in programming?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>To write new code from scratch</p>
          </statement>

          <feedback>
            <p>
              Incorrect. APIs and libraries allow you to use code written by
              others.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>To use code written by others</p>
          </statement>

          <feedback>
            <p>
              Correct! APIs and libraries are used to use code written by
              others.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>To create programming languages</p>
          </statement>

          <feedback>
            <p>
              Incorrect. APIs and libraries are not for creating programming
              languages.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>To compile code</p>
          </statement>

          <feedback>
            <p>Incorrect. APIs and libraries are not for compiling code.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="turtle-library">
    <title>Turtle Library</title>
    <p>
      <term>Classes</term> are one of the main building blocks in Java and other
      object-oriented languages. We’ll discuss writing your own classes in Unit
      3 but for now we just need to know enough to use classes that other people
      have written.
    </p>

    <p>
      A class defines a new reference type containing specific
      <term>attributes</term> and <term>behaviors</term>, which are usually
      called <term>fields</term> and <term>methods</term> in Java. All instances
      of a given class have the same fields and methods though each instance
      will have its own values for each field.
    </p>

    <p>
      The <c>Turtle</c> Java library, written by one of the author’s of this
      book, Dr. Barbara Ericson, is a set of classes that allow you to create
      drawings using an animated turtle that moves around the screen. The turtle
      can move forward, turn, and draw lines. The classes from the turtle
      library can be imported into your code and is built in to this e-book.
    </p>

    <p>
      The Turtle library is named after its main class, <c>Turtle</c>, which
      represents a turtle that can move around the screen, drawing lines. The
      following picture of a turtle shows some of the attributes every
      <c>Turtle</c> object has, such as the <c>width</c>, <c>height</c>, and
      <c>color</c> of the turtle’s body as well as <term>methods</term> like
      <c>forward()</c>, <c>backward()</c>, shown in the picture written around
      the turtle.
    </p>

    <figure align="center">
      <caption>Turtle Attributes and Behaviors</caption>
      <image source="Unit1-Using-Objects-and-Methods/Figures/turtleOOD.svg" width="71%" alt="Turtle attributes and behaviors" />
    </figure>

    <p>
      <term>Attributes</term> (which are sometimes called <term>fields</term> in
      documentation) refer to the data related to the class and are stored in
      variables. <term>Behaviors</term> refer to what objects of the class can
      do (or what can be done with it) and are defined by methods. The
      <c>Turtle</c> class has attributes like <c>width</c> and <c>height</c>
      that store information that is used by the Turtle class to draw the turtle
      on the screen, and it has behaviors/methods like <c>forward()</c> and
      <c>turnLeft()</c> that allow us to control the turtle from our code. We
      will learn more about classes, objects, fields, and methods in the next
      lessons, but this lesson introduces them to explore APIs.
    </p>

    <p>
      How can you tell attributes and methods apart when you look at library
      documentation? One easy way is that methods will always have parentheses
      after them, for example <c>forward()</c> or <c>println()</c>. Sometimes
      these are empty, but still necessary, and sometimes they contain data that
      the method needs to do its job, for example what to print. Attributes are
      variables and will not have parentheses after them. Here are <url
      href="https://cseweb.ucsd.edu/~ricko/CSE11/turtleClassesDocs/index.html?turtleClasses/SimpleTurtle.html">the
      Javadocs for that lists all of the Turtle methods</url> (but not the
      attributes).
    </p>

    <p>
      Try the Java program below that creates a <c>Turtle</c> object and stores
      a reference to in it the variable <c>yertle</c>. The following code is
      used to tell the turtle to move forward and then turn right.
    </p>

    <program language="java">
      <code>
yertle.forward();
yertle.turnRight();
      </code>
    </program>

    <p>
      The <term>dot operator</term> (<c>.</c>) is used to run an object’s
      methods, just like in the <c>System.out.println()</c> method. (If the code
      below does not work or is too slow in your browser, you can also see the
      <c>Turtle</c> code in action at this <url
      href="https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java">replit
      link</url> (refresh page after forking and if it gets stuck) or download
      the files <url
      href="https://github.com/bhoffman0/CSAwesome2/raw/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip">here</url>
      to use in your own IDE.)
    </p>

    <activity label="TurtleAPI">
      <statement>
        <p>
          Try clicking the run button below to see what the following program
          does. Then add 1 more line of code on line 16 to make yertle go
          forward() again.
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        // Do not change the next 2 lines
        World habitat = new World(300, 300);
        Turtle yertle = new Turtle(habitat);

        // Code to make yertle move forward and turn right
        yertle.forward();
        yertle.turnRight();
        // Add a line of code to make yertle go forward() again



        // Do not change
        habitat.show(true);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTest");
    }
    @Test
    public void test1()
    {
        String code = getCode();
        String expect = "yertle.forward";

        int count = countOccurences(code, expect);
        boolean passed = (count &gt;= 2);
        passed = getResults("2+", "" + count, "yertle.forward() count", passed);

        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <activity label="turtle_dir">
      <statement>
        <p>Which way does a turtle face when it is first created?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>North</p>
          </statement>

          <feedback>
            <p>
              Turtles start off facing north which is toward the top of the
              page.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>South</p>
          </statement>

          <feedback>
            <p>Which way does yertle first move in the example above?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>East</p>
          </statement>

          <feedback>
            <p>Which way does yertle first move in the example above?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>West</p>
          </statement>

          <feedback>
            <p>Which way does yertle first move in the example above?</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="turtle_type">
      <statement>
        <p>
          What type of thing does <c>Turtle</c> name in the program above?
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>class</p>
          </statement>

          <feedback>
            <p>
              Yes, <c>Turtle</c> is a class that defines the data and behaviors
              for all turtles.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>object</p>
          </statement>

          <feedback>
            <p>
              There is an object here: the variable <c>yertle</c> holds a
              reference to an object of type <c>Turtle</c>. But <c>Turtle</c> is
              not the name for a specific object.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>attribute</p>
          </statement>

          <feedback>
            <p>
              An attribute is something the object knows about itself. Typically
              we do not even know the names of attributes in classes that we did
              not write ourselves.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>method</p>
          </statement>

          <feedback>
            <p>
              A method is something an object can do. The names <c>forward</c>
              and <c>turnRight</c> name methods in the code above.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="type_turn_right">
      <statement>
        <p>
          What type of thing does <c>turnRight</c> name in the program above?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>object</p>
          </statement>

          <feedback>
            <p>An object has data and behavior.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>class</p>
          </statement>

          <feedback>
            <p>
              A class defines the data and behavior for all objects of that
              type.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>attribute</p>
          </statement>

          <feedback>
            <p>An attribute is something the object knows about itself.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>method</p>
          </statement>

          <feedback>
            <p>
              Yes. A method desribes some behavior an object can do like turning
              right. Code outside the class can cause that behavior to happen by
              calling the method.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="type_position">
      <statement>
        <p>
          Every turtle has a position. What kind of program element stores
          information like a turtle's position?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>object</p>
          </statement>

          <feedback>
            <p>An object has data and behavior.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>class</p>
          </statement>

          <feedback>
            <p>
              A class defines the data and behavior for all objects of that
              type.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>attribute</p>
          </statement>

          <feedback>
            <p>
              An attribute holds information about an object such as its
              position.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>method</p>
          </statement>

          <feedback>
            <p>A method is something an object can do like turn right.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="attributes_class">
      <statement>
        <p>What are attributes of a class?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Methods that perform tasks</p>
          </statement>

          <feedback>
            <p>Incorrect. Attributes are not methods.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Data related to instances of the class stored in variables</p>
          </statement>

          <feedback>
            <p>
              Correct! Attributes are data related to the class stored in
              variables.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>The arguments of a class</p>
          </statement>

          <feedback>
            <p>Incorrect. Classes do not have arguments.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Packages that contain the class</p>
          </statement>

          <feedback>
            <p>Incorrect. Attributes are not packages.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <image source="Unit1-Using-Objects-and-Methods/Figures/turtleForwardLeftForward.png" width="36%" />
    <activity label="parsons_TurtleL" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <p>
          The following program uses a turtle to draw a sideways capital L as
          seen in the image, but the lines are mixed up. The program should do
          all necessary set-up. Then it should ask the turtle to turn right, go
          forward, turn left, and then go forward 50 pixels. Next, it should ask
          the habitat to show itself. Drag the needed blocks of statements from
          the left column to the right column and put them in the right order.
          There are 2 extra blocks that are not needed in a correct solution.
          Then click on Check Me to see if you are right. You will be told if
          any of the lines are in the wrong order or are the wrong blocks.
        </p>
      </statement>

      <blocks>
        <block>
          <cline>public class TurtleTest {</cline>
        </block>

        <block>
          <cline>    public static void main(String[] args) {</cline>
        </block>

        <block>
          <cline>        World habitat = new World(300,300);</cline>
          <cline>        Turtle yertle = new Turtle(habitat);</cline>
        </block>

        <block>
          <choice correct="yes">
            <cline>        yertle.turnRight();</cline>
          </choice>

          <choice>
            <cline>        yertle.right();</cline>
          </choice>
        </block>

        <block>
          <choice correct="yes">
            <cline>        yertle.forward();</cline>
          </choice>

          <choice>
            <cline>        yertle.forward()</cline>
          </choice>
        </block>

        <block>
          <cline>        yertle.turnLeft();</cline>
        </block>

        <block>
          <cline>        yertle.forward(50);</cline>
        </block>

        <block>
          <cline>        habitat.show(true);</cline>
        </block>

        <block>
          <cline>    } // end main</cline>
          <cline>} // end class</cline>
        </block>
      </blocks>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-turtle-drawing">
    <title>Coding Challenge : Turtle Drawing</title>
    <p>
      Make yertle the Turtle draw a shape. For example, have it draw a square or
      a zigzag shape or a block letter by calling the forward method and a turn
      method multiple times. We encourage you to work in pairs for this
      challenge. In the next lessons, we will draw more complicated shapes. Here
      are some simple turtle methods that you could use or look at <url
      href="https://cseweb.ucsd.edu/~ricko/CSE11/turtleClassesDocs/index.html?turtleClasses/SimpleTurtle.html">the
      Turtle Javadocs</url> for the complete list.
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>yertle.forward();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.turnLeft();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.turnRight();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.backward();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.penUp();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.penDown();</c>
          </p>
        </li>
      </ul>
    </p>

    <project label="challenge1-7-TurtleShape">
      <statement>
        <p>
          Have yertle draw a shape, for example a square or a zigzag shape or a
          block letter by calling the forward method and a turn method multiple
          times.
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
import java.awt.*;
import java.util.*;

public class TurtleShape
{
    public static void main(String[] args)
    {
        World habitat = new World(500, 500);
        Turtle yertle = new Turtle(habitat);

        // Use yertle's forward and turnRight or turnLeft methods to draw a shape




        // Do not change the line below!
        habitat.show(true);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleShape");
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String right = ".turnRight()";
        String left = ".turnLeft()";

        int countR = countOccurences(code, right);
        int countL = countOccurences(code, left);
        int count = countR + countL;

        boolean passed = (count &gt;= 3);

        passed =
                getResults(
                        "3+ turns",
                        "" + count + "+ turns",
                        "3+ turnRight() or turnLeft()",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String forwards = ".forward";
        String backwards = ".backward";

        int forward = countOccurences(code, forwards);
        int backward = countOccurences(code, backwards);
        int moves = forward + backward;

        boolean passed = (moves &gt;= 4);

        passed =
                getResults(
                        "4+ moves", "" + moves +
                        "+ moves",
                        "forward or backward", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String[] code = getCode().split("\n");
        int expect = 25;

        boolean passed = code.length &gt;= expect;

        passed =
                getResults(
                        expect + "+ line(s)",
                        "" + code.length + " lines(s)",
                        "More than " + expect + " lines of code",
                        passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-12">
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            (AP 1.7.A.1) <term>Libraries</term> are collections of classes
            written by other programmers.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) An <term>Application Programming Interface (API)</term>
            specification informs the programmer how to use classes in a
            library.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) Documentation found in API specifications and libraries
            is essential to understanding the attributes and behaviors of a
            class defined by the API.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) Classes in the APIs and libraries are grouped into
            <term>packages</term> that can be imported into a program.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) A <term>class</term> defines a specific reference type
            and is the building block of object-oriented programming. Existing
            classes and class libraries can be utilized to create objects.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.2) <term>Attributes</term> refer to the data related to
            the class and are stored in variables.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.2) <term>Behaviors</term> refer to what instances of the
            class can do (or what can be done with them) and are defined by
            methods.
          </p>
        </li>
      </ul>
    </p>
  </subsection>
</section>
