<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="topic-1-7-APIs-and-libraries">
  <title>
    APIs and Libraries 
    <image source="_static/45min.svg" />
  </title>

  <introduction>
    <idx>API</idx>
    <idx>library</idx>
    <idx>package</idx>
    <idx>class</idx>
    <idx>attribute</idx>
    <idx>method</idx>
    <idx>dot operator</idx>
    <idx>behavior</idx>
    <p>
      So far in this book, you have been using code like
      <c>System.out.println("hello, world!")</c> to print to the screen. When
      you include that code in a program, you don’t have to worry exactly about
      how it works; you just need to know what it does. Namely, it causes the
      text “hello, world!” to appear on the screen.
    </p>

    <p>
      A collection of code that you can use that you don’t have to write
      yourself is called a <term>library</term> and the details of how to use a
      library are described in its <term>Application Programming
      Interface</term>, or <term>API</term> for short.
      <c>System.out.println()</c> is part of the Java API, a large set of code
      that comes with Java.
    </p>

    <p>
      APIs and libraries are essential to programming because they allow you to
      focus on the specific task you are trying to accomplish without having to
      rewrite the same common bits of functionality over and over.
    </p>
  </introduction>

  <subsection xml:id="classes-attributes-behaviors">
    <title>Classes, Attributes, and Behaviors</title>
    <p>
      To understand how APIs are defined in Java lets take apart the snippet
    </p>

    <program language="java">
      <code>
System.out.println("hello, world!");
      </code>
    </program>

    <p>
      To start with, you need to know that <c>System</c> is a <c>class</c>.
      We’ll talk about classes a lot more in later units but for now you just
      need to know that classes are a way of defining a set of
      <term>attributes</term> and <term>behaviors</term>. Each class defines a
      new kind of value similar to how each of the <term>primitive types</term>
      <c>int</c>, <c>double</c>, and <c>boolean</c> that we’ve already learned
      about define a particular kind of value, such as a 32-bit integer quantity
      for an <c>int</c>. These new kinds of values defined by classes are called
      <term>objects</term> which is where <term>object-oriented
      programming</term> gets its name.
    </p>

    <p>
      Objects can be more complex than primitive values since they can consist
      of an arbitrary number of <term>attributes</term>. Each attribute of an
      object is stored in a variable defined by the class. And unlike primitive
      values, which can only be operated on with a fixed set of operators built
      into Java like <c>+</c> and <c>*</c>, objects can support arbitrary
      <term>behaviors</term> defined in the class as <term>methods</term>.
    </p>

    <p>
      We’ll discuss writing your own classes in Unit 3 but this unit we just
      want to focus on <em>using</em> classes and objects as part of an API.
    </p>

    <p>
      So <c>System</c> is a class. The <c>out</c> in
      <c>System.out.println("hello, world!")</c> is an attribute that belongs to
      the <c>System</c> class. The period (<c>.</c>) in <c>System.out</c> is
      called the <term>dot operator</term> and it allows us to access the
      attributes and methods of a class or an object. In this case the dot says,
      “go to the <c>System</c> class and get the value of its <c>out</c>
      attribute.”
    </p>

    <p>
      The <c>out</c> attribute is a type of value defined by another class
      called <c>PrintStream</c>. And <c>PrintStream</c> defines a
      <term>method</term><c>println</c> which is how classes can define
      behaviors. The dot operator is used again to say, “get the method named
      <c>println</c> from the value stored in the <c>out</c> attribute”. Then
      the method is run with the argument <c>"hello, world!"</c> to print the
      text to the screen.
    </p>

    <p>
      In later units you’ll learn how to write your own methods to give your own
      classes useful behaviors. But a lot of Java programming involves calling
      methods defined in code you didn’t write. You don’t have to see the code
      to be able to use it; you just need to understand what the method does.
    </p>
  </subsection>

  <subsection xml:id="packages">
    <title>Packages</title>
    <p>
      Classes are made up of attributes and behaviors which allows us to group
      related data and behavior together. But often several classes need to be
      used together. In Java, related classes can be grouped together into a
      <term>package</term>. You can think of a package like a folder where you
      store related documents. Several classes that work together will likely be
      grouped into a single package just to keep things organized. But more
      importantly, when we want to use a class defined in a package in our own
      program we can <term>import</term> it and then use it as if we had written
      it in our own program.
    </p>

    <p>
      Because classes that are used together are usually collected into the same
      package, Java programmers often use the terms library, API, and package
      somewhat interchangeably. But to be precise, a library is a collection of
      classes that you can use, the library’s API describes how you use it, and
      the classes in the library are probably organized into one or more Java
      packages.
    </p>

    <p>
      Later on, we will learn to <c>import</c> other Java packages to use in our
      code, but first let’s talk about a package that is always available in any
      Java program: <c>java.lang</c>.
    </p>

    <p>
      The <c>java.lang</c> package contains key classes that are fundamental to
      the Java programming language, such as <c>String</c> and <c>System</c>.
      Like all packages that are part of Java, <c>java.lang</c> is documented in
      <term>Javadocs</term>, Java’s version of online <term>API
      documentation</term>. Learning to read and navigate Javadocs is a key part
      of being a Java programmer.
    </p>

    <activity label="count-println">
      <statement>
        <p>
          Take a look at the <url
          href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/lang/package-summary.html">Javadocs
          for the <c>java.lang</c> package</url>. Can you find the documentation
          for the <c>System</c> class? Once you’ve found the Javadocs for
          <c>System</c>, see if you can find the documentation for the
          <c>static</c> field <c>out</c>. That should tell you that it is an
          instance of the class <c>PrintStream</c>. From there you can click on
          <c>PrintStream</c> to navigate to the <url
          href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/PrintStream.html"><c>PrintStream</c>
          Javadocs</url> to find documentation for the various versions of the
          <c>println()</c> method that we use to print to the screen.
        </p>

        <p>
          How many <c>println()</c> methods are documented in the <url
          href="https://docs.oracle.com/en/java/javase/22/docs/api/java.base/java/io/PrintStream.html"><c>PrintStream</c>
          Javadocs</url>?
        </p>

        <p>
          <fillin mode="string" answer="10" />
        </p>
      </statement>

      <evaluation>
        <evaluate>
          <test>
            <strcmp use-answer="yes" />
            <feedback>
              <p>
                Correct. One for each for nine different argument types plus one
                that takes no arguments and just prints an end-of-line
                character.
              </p>
            </feedback>
          </test>

          <test>
            <!-- else -->
            <feedback>
              <p>Only count the println methods, not print or printf methods.</p>
            </feedback>
          </test>
        </evaluate>
      </evaluation>
    </activity>

    <activity label="API_vocab_match">
      <statement>
        <p>
          Drag the definition from the left and drop it on the correct concept
          on the right. Click the "Check Me" button to see if you are correct.
        </p>
      </statement>

      <feedback>
        <p>Review the summaries above.</p>
      </feedback>

      <cardsort>
        <match>
          <premise order="1">A collection of classes written by other programmers</premise>
          <response>library</response>
        </match>

        <match>
          <premise order="2">
            A collection of related classes organized to be imported into your code
          </premise>

          <response>package</response>
        </match>

        <match>
          <premise order="3">A specification that tells a programmer how to use a library</premise>
          <response>API</response>
        </match>

        <match>
          <premise order="4">The main building block of programs in Java</premise>
          <response>class</response>
        </match>

        <match>
          <premise order="5">A block of code that performs a specific task</premise>
          <response>method</response>
        </match>
      </cardsort>
    </activity>

    <activity label="purpose_apis">
      <statement>
        <p>What is the purpose of APIs and libraries in programming?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>To write new code from scratch</p>
          </statement>

          <feedback>
            <p>
              Incorrect. APIs and libraries allow you to use code written by
              others.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>To use code written by others</p>
          </statement>

          <feedback>
            <p>Correct! APIs and libraries let you use code written by others.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>To create programming languages</p>
          </statement>

          <feedback>
            <p>
              Incorrect. APIs and libraries are are defined <em>in</em> a
              programming language.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>To compile code</p>
          </statement>

          <feedback>
            <p>Incorrect. APIs and libraries are not for compiling code.</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  </subsection>

  <subsection xml:id="turtle-library">
    <title>Turtle Library</title>
    <p>
      While Java comes with a lot of useful classes, not all libraries the we
      might want to use come with Java itself. But there are lots of libraries
      written by other programmers that we can use in our programs.
    </p>

    <p>
      The <c>Turtle</c> Java library, written by one of the author’s of this
      book, Dr. Barbara Ericson, is a set of classes that allow you to create
      drawings using animated turtles that move around the screen. A turtle can
      move forward, turn, and draw lines. The classes from the turtle library
      can be imported into your code and is built into this e-book.
    </p>

    <p>
      The Turtle library is named after its main class, <c>Turtle</c>, which
      represents turtles that can move around the screen, drawing lines. The
      following picture of a turtle shows some of the attributes every
      <c>Turtle</c> object has, such as a <c>color</c>, <c>xPos</c>,
      <c>yPos</c>, and <c>heading</c> as well as methods like <c>forward()</c>,
      <c>backward()</c>, <c>turnLeft()</c>, and <c>turnRight()</c> shown in the
      picture written around the turtle.
    </p>

    <figure align="center">
      <caption>Turtle Attributes and Behaviors</caption>
      <image source="Unit1-Using-Objects-and-Methods/Figures/turtleOOD.svg" width="71%" alt="Turtle attributes and behaviors" />
    </figure>

    <p>
      While the class <c>Turtle</c> defines what attributes each turtle has,
      every turtle has its own value for each attribute. So we can have one blue
      turtle and one red turtle, just like we can have one <c>int</c> whose
      value is <c>2</c> and another whose value is <c>10</c>. The actual
      <c>Turtle</c> class defines several more attributes than the ones shown in
      the image.
    </p>

    <p>
      Similarly, the behaviors defined by the <c>Turtle</c> class are shared
      among all turtle values, but their exact effects may be affected by the
      attributes of the turtle itself. For instance, the <c>forward()</c>
      method, as you’ll see, causes the tutle to move forward and draw a line.
      The color of the line is determined by the turtle’s color attribute. (The
      color attribute also controls the color of the turtle’s body when it is
      shown on the screen.)
    </p>

    <p>
      How can you tell attributes and methods apart when you look at library
      documentation? One easy way is that methods will always have parentheses
      after them, for example <c>forward()</c> or <c>println()</c>. Sometimes
      these are empty, but still necessary, and sometimes they contain data that
      the method needs to do its job, for example what to print. Attributes are
      variables and will not have parentheses after them. Here are <url
      href="https://cseweb.ucsd.edu/~ricko/CSE11/turtleClassesDocs/index.html?turtleClasses/SimpleTurtle.html">the
      Javadocs listing all of the Turtle methods</url> (but not the attributes).
    </p>

    <p>
      Try the Java program below that creates a <c>Turtle</c> object and stores
      a reference to it in the variable <c>yertle</c>. The following two lines
      of code are used to tell the turtle to move forward and then turn right.
    </p>

    <program language="java">
      <code>
yertle.forward();
yertle.turnRight();
      </code>
    </program>

    <p>
      In these lines the dot operator (<c>.</c>) is used to call the methods
      <c>forward()</c> and <c>turnRight()</c> on the turtle value named by the
      variable <c>yertle</c>. The exact behavior of those methods will depend on
      the current values of the turtle’s attributes such as its color, its x and
      y position, and its heading. For instance calling <c>forward</c> will
      cause the turtle to draw a line from its current x and y position to a new
      position 100 pixels away in whatever direction the turtle is facing. The
      color of the line will be determined by the turtle’s color.
    </p>

    <activity label="TurtleAPI">
      <statement>
        <p>
          Try clicking the run button below to see what the following program
          does. Then add 1 more line of code on line 16 to make yertle go
          forward again.
        </p>

        <p>
          If the code below does not work or is too slow in your browser, you
          can also see the <c>Turtle</c> code in action at this <url
          href="https://replit.com/@BerylHoffman/Java-Swing-Turtle#Main.java">replit
          link</url> (refresh page after forking and if it gets stuck) or
          download the files <url
          href="https://github.com/bhoffman0/CSAwesome2/raw/main/_sources/Unit1-Using-Objects-and-Methods/TurtleJavaSwingCode.zip">here</url>
          to use in your own IDE.)
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
import java.awt.*;
import java.util.*;

public class TurtleTest
{
    public static void main(String[] args)
    {
        // Do not change the next 2 lines
        World habitat = new World(300, 300);
        Turtle yertle = new Turtle(habitat);

        // Code to make yertle move forward and turn right
        yertle.forward();
        yertle.turnRight();
        // Add a line of code here to make yertle go forward again

        // Do not change
        habitat.show(true);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleTest");
    }
    @Test
    public void test1()
    {
        String code = getCode();
        String expect = "yertle.forward";

        int count = countOccurences(code, expect);
        boolean passed = (count &gt;= 2);
        passed = getResults("2+", "" + count, "yertle.forward() count", passed);

        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>

    <activity label="turtle_dir">
      <statement>
        <p>Which way does a turtle face when it is first created?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>North</p>
          </statement>

          <feedback>
            <p>
              Turtles start off facing north which is toward the top of the
              page.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>South</p>
          </statement>

          <feedback>
            <p>Which way does yertle first move in the example above?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>East</p>
          </statement>

          <feedback>
            <p>Which way does yertle first move in the example above?</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>West</p>
          </statement>

          <feedback>
            <p>Which way does yertle first move in the example above?</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="turtle_type">
      <statement>
        <p>
          What type of thing does <c>Turtle</c> name in the program above?
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>class</p>
          </statement>

          <feedback>
            <p>
              Yes, <c>Turtle</c> is a class that defines the attributes and
              behaviors for all turtles.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>object</p>
          </statement>

          <feedback>
            <p>
              There is an object here: the variable <c>yertle</c> holds a
              reference to an object of type <c>Turtle</c>. But <c>Turtle</c> is
              not the name for a specific object.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>attribute</p>
          </statement>

          <feedback>
            <p>
              An attribute is one part the definition of a class like
              <c>Turtle</c>.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>behavior</p>
          </statement>

          <feedback>
            <p>
              An behavior is something an object can do, defined as a method in
              the class. In the code above <c>forward</c> and <c>turnRight</c>
              are the names of methods defined in the class <c>Turtle</c>.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="type_turn_right">
      <statement>
        <p>
          What type of thing does <c>turnRight</c> name in the program above?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>object</p>
          </statement>

          <feedback>
            <p>
              In the code above the variable <c>yertle</c> holds a reference to
              an object.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>class</p>
          </statement>

          <feedback>
            <p>
              A class defines the data and behavior for all objects of that
              type. <c>turnRight</c> names just one thing defined in the class
              <c>Turtle</c>
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>attribute</p>
          </statement>

          <feedback>
            <p>
              An attribute is something the object knows about itself. The name
              <c>turnRight</c> refers to something a <c>Turtle</c> object can
              do.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>method</p>
          </statement>

          <feedback>
            <p>
              Yes. A method desribes some behavior an object can do like turning
              right. Code outside the class can cause that behavior to happen by
              calling the method.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="type_position">
      <statement>
        <p>
          Every turtle has a position. What kind of program element stores
          information like a turtle’s position?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>object</p>
          </statement>

          <feedback>
            <p>An object has data and behavior.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>class</p>
          </statement>

          <feedback>
            <p>
              A class defines the data and behavior for all objects of that
              type.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>attribute</p>
          </statement>

          <feedback>
            <p>
              An attribute holds information about an object such as its
              position.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>method</p>
          </statement>

          <feedback>
            <p>A method is something an object can do like turn right.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="attributes_class">
      <statement>
        <p>What are attributes of a class?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Tasks performed by methods defined in a class.</p>
          </statement>

          <feedback>
            <p>Incorrect. Attributes are not methods.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Data stored in variables defined in a class.</p>
          </statement>

          <feedback>
            <p>
              Correct! Attributes are data related to the class stored in
              variables.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>The arguments of a class</p>
          </statement>

          <feedback>
            <p>Incorrect. Classes do not have arguments.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Packages that contain the class</p>
          </statement>

          <feedback>
            <p>Incorrect. Attributes are not packages.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="parsons_TurtleL" numbered="yes" adaptive="yes" indentation="hide" language="java">
      <statement>
        <sidebyside>
          <p>
            The following program uses a turtle to draw a sideways capital L as
            seen in the image, but the lines are mixed up. The program should do
            all necessary set-up. Then it should ask the turtle to turn right,
            go forward, turn left, and then go forward 50 pixels. Next, it
            should ask the habitat to show itself. Drag the needed blocks of
            statements from the left column to the right column and put them in
            the right order. There are 2 extra blocks that are not needed in a
            correct solution. Then click on Check Me to see if you are right.
            You will be told if any of the lines are in the wrong order or are
            the wrong blocks.
          </p>

          <image source="Unit1-Using-Objects-and-Methods/Figures/turtleForwardLeftForward.png" width="36%" />
        </sidebyside>
      </statement>

      <blocks>
        <block>
          <cline>public class TurtleTest {</cline>
        </block>

        <block>
          <cline>    public static void main(String[] args) {</cline>
        </block>

        <block>
          <cline>        World habitat = new World(300,300);</cline>
          <cline>        Turtle yertle = new Turtle(habitat);</cline>
        </block>

        <block>
          <choice correct="yes">
            <cline>        yertle.turnRight();</cline>
          </choice>

          <choice>
            <cline>        yertle.right();</cline>
          </choice>
        </block>

        <block>
          <choice correct="yes">
            <cline>        yertle.forward();</cline>
          </choice>

          <choice>
            <cline>        yertle.forward()</cline>
          </choice>
        </block>

        <block>
          <cline>        yertle.turnLeft();</cline>
        </block>

        <block>
          <cline>        yertle.forward(50);</cline>
        </block>

        <block>
          <cline>        habitat.show(true);</cline>
        </block>

        <block>
          <cline>    } // end main</cline>
          <cline>} // end class</cline>
        </block>
      </blocks>
    </activity>
  </subsection>

  <subsection xml:id="coding-challenge-turtle-drawing">
    <title>Coding Challenge: Turtle Drawing</title>
    <p>
      Make yertle the Turtle draw a shape. For example, have it draw a square or
      a zigzag shape or a block letter by calling the forward method and a turn
      method multiple times. We encourage you to work in pairs for this
      challenge. In the next lessons, we will draw more complicated shapes. Here
      are some simple turtle methods that you could use or look at <url
      href="https://cseweb.ucsd.edu/~ricko/CSE11/turtleClassesDocs/index.html?turtleClasses/SimpleTurtle.html">the
      Turtle Javadocs</url> for the complete list.
    </p>

    <p>
      <ul>
        <li>
          <p>
            <c>yertle.forward();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.turnLeft();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.turnRight();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.backward();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.penUp();</c>
          </p>
        </li>

        <li>
          <p>
            <c>yertle.penDown();</c>
          </p>
        </li>
      </ul>
    </p>

    <project label="challenge1-7-TurtleShape">
      <statement>
        <p>
          Have yertle draw a shape, for example a square or a zigzag shape or a
          block letter by calling the forward method and a turn method multiple
          times.
        </p>
      </statement>

      <program interactive="activecode" language="java" datafile="turtleClasses.jar,turtleClasses2.jar">
        <code>
import java.awt.*;
import java.util.*;

public class TurtleShape
{
    public static void main(String[] args)
    {
        World habitat = new World(500, 500);
        Turtle yertle = new Turtle(habitat);

        // Use any of yertle's methods such as forward, turnRight, and turnLeft
        // to draw a shape

        // Do not change the line below!
        habitat.show(true);
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{
    public RunestoneTests()
    {
        super("TurtleShape");
    }

    @Test
    public void test2()
    {
        String code = getCode();
        String right = ".turnRight()";
        String left = ".turnLeft()";

        int countR = countOccurences(code, right);
        int countL = countOccurences(code, left);
        int count = countR + countL;

        boolean passed = (count &gt;= 3);

        passed =
                getResults(
                        "3+ turns",
                        "" + count + "+ turns",
                        "3+ turnRight() or turnLeft()",
                        passed);
        assertTrue(passed);
    }

    @Test
    public void test3()
    {
        String code = getCode();
        String forwards = ".forward";
        String backwards = ".backward";

        int forward = countOccurences(code, forwards);
        int backward = countOccurences(code, backwards);
        int moves = forward + backward;

        boolean passed = (moves &gt;= 4);

        passed =
                getResults(
                        "4+ moves", "" + moves +
                        "+ moves",
                        "forward or backward", passed);
        assertTrue(passed);
    }

    @Test
    public void test4()
    {
        String[] code = getCode().split("\n");
        int expect = 25;

        boolean passed = code.length &gt;= expect;

        passed =
                getResults(
                        expect + "+ line(s)",
                        "" + code.length + " lines(s)",
                        "More than " + expect + " lines of code",
                        passed);
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </project>
  </subsection>

  <subsection xml:id="summary-12">
    <title>Summary</title>
    <p>
      <ul>
        <li>
          <p>
            (AP 1.7.A.1) <term>Libraries</term> are collections of classes
            written by other programmers.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) An <term>Application Programming Interface (API)</term>
            specifies how to use the classes in a library.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) Documentation found in API specifications and libraries
            is essential to understanding the attributes and behaviors of a
            class defined by the API.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) Classes in the APIs and libraries are grouped into
            <term>packages</term> that can be imported into a program.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.1) A <term>class</term> defines a specific reference type
            and is the building block of object-oriented programming. Existing
            classes and class libraries can be utilized to create objects.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.2) <term>Attributes</term> refer to the data related to
            the class and are stored in variables.
          </p>
        </li>

        <li>
          <p>
            (AP 1.7.A.2) <term>Behaviors</term> refer to what instances of the
            class can do (or what can be done with them) and are defined by
            methods.
          </p>
        </li>
      </ul>
    </p>
  </subsection>
</section>
