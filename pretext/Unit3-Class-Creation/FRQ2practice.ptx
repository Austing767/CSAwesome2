<?xml version="1.0"?>

<section xml:id="FRQ2practice">
  <title>FRQ 2 Practice with Classes</title>
  <introduction>
    <p>Many of the FRQs on the AP exam contain a table which shows output or return values
      from methods in a class. In this practice, you will be a table that shows method calls and their output. 
      You will need to write a class with the described methods that will produce the output shown in the table. Thank you to Sam Procopio from Bishop Blanchet High School in Seattle, WA, for these exercises.
    </p> </introduction>

   
<subsection xml:id="FRQ2practiceTree">
    <title>Tree Class</title>
    <p>Write a class called Tree that has the appropriate instance variables and methods to produce the output described in the table below.</p>

<table><tabular row-headers="yes">
      <col top="minor"/><col top="minor"/><col top="minor"/>    
      <row header="yes" left="minor">
        <cell bottom="minor" right="minor"></cell>
       <cell bottom="minor" right="minor">Method Calls</cell><cell bottom="minor" right="minor">Output</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">Tree birch = new Tree(10, “soft”);</cell><cell bottom="minor" right="minor"></cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(birch.getHeight());</cell><cell bottom="minor" right="minor">10</cell></row>      
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">birch.water(5);</cell><cell bottom="minor" right="minor"></cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(birch.getHeight());</cell><cell bottom="minor" right="minor">15</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">birch.cut();</cell><cell bottom="minor" right="minor"></cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(birch.getHeight());</cell><cell bottom="minor" right="minor">7</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(birch.woodType());</cell><cell bottom="minor" right="minor">soft wood</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">Tree oak = new Tree(20, “hard”);</cell><cell bottom="minor" right="minor"></cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(oak.getHeight());</cell><cell bottom="minor" right="minor">20</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(oak.woodType());</cell><cell bottom="minor" right="minor">hard wood</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">oak.water(2);</cell><cell bottom="minor" right="minor"></cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(oak.getHeight());</cell><cell bottom="minor" right="minor">22</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">oak.cut();</cell><cell bottom="minor" right="minor"></cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(oak.getHeight());</cell><cell bottom="minor" right="minor">14</cell></row>
      </tabular></table>

<activity label="classTree">
        <statement>
        <p>Write the class Tree below with the appropriate instance variables, constructor, and methods described in main method and in the table above. </p>
        </statement>
        <program interactive="activecode" language="java">
            <code>
  public class Tree
  {
      // write instance variable declarations here
    
    
      // write the constructor and other methods here
    
    
      public static void main(String[] args)
      {
          Tree birch = new Tree(10, "soft");
          System.out.println(birch.getHeight());
          birch.water(5); // grows tree height by 5
          System.out.println(birch.getHeight());
          birch.cut(); // cuts off 8 from height
          System.out.println(birch.getHeight());
          System.out.println(birch.woodType());
    
          Tree oak = new Tree(20, "hard");
          System.out.println(oak.getHeight());
          System.out.println(oak.woodType());
          oak.water(2); // grows tree height by 2
          System.out.println(oak.getHeight());
          oak.cut(); // cuts off 8 from height
          System.out.println(oak.getHeight());
      }
    }
    </code><tests>
    import static org.junit.Assert.*;
    import org.junit.*;
    import java.io.*;    
    public class RunestoneTests extends CodeTestHelper
    {
        public RunestoneTests()
        {
            super("Tree");
        }
    
        @Test
        public void testMain()
        {
            String expected = "10\n15\n7\nsoft wood\n20\nhard wood\n22\n14\n";
            String output = getMethodOutput("main");

            boolean passed = getResults(expected, output, "Checking main method output");
            assertTrue(passed);
        }
        @Test
        public void test2()
        {          
            String results = checkConstructor(2);
    
            boolean passed = getResults("pass", results, "Checking constructor with 2 parameters");
            assertTrue(passed);
        }
    
        @Test
        public void test3()
        {
            String actual = testPrivateInstanceVariables();
            String expected = "2 Private";
    
            boolean passed = getResults(expected, actual, "Checking declaration of instance variables");
            assertTrue(passed);
        }
        @Test
        public void test4() {
          boolean passed = checkCodeContains("public void water(int", "Checking for public water method with an int parameter");
         assertTrue(passed);
        }
        @Test
        public void test5() {
          boolean passed = checkCodeContains("public void cut()", "Checking for public cut method");
         assertTrue(passed);
        }
        @Test 
        public void test6() {
          boolean passed = checkCodeContains("public String woodType()", "Checking for public woodType method that returns a String");
         assertTrue(passed);
        }
        @Test
        public void test7() {
          boolean passed = checkCodeContains("public int getHeight()", "Checking for public getHeight method that returns an int");
         assertTrue(passed);
        }
      }
            </tests>
        </program>
    </activity>
    </subsection>
    <subsection xml:id="FRQ2practiceBook">
    <title>Book Class</title>
    <p>Based on the table below, write a complete class called Book that has the appropriate instance variables and methods to produce the output described in the table.</p>
   
<table> 
<tabular row-headers="yes">
      <col top="minor"/> <col top="minor"/><col top="minor"/>
      
      <row header="yes" left="minor">
        <cell bottom="minor" right="minor"></cell>
       <cell bottom="minor" right="minor">Method Calls</cell><cell bottom="minor" right="minor">Output</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">Book hp = new Book(“Harry Potter”, 150, true);</cell><cell bottom="minor" right="minor"></cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(hp.getNumPages());</cell><cell bottom="minor" right="minor">150</cell></row>      
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(hp.getName());</cell><cell bottom="minor" right="minor">Harry Potter</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(hp.isHardCover());</cell><cell bottom="minor" right="minor">true</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(hp.getDamages());</cell><cell bottom="minor" right="minor">0</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(hp.repairBook());</cell><cell bottom="minor" right="minor">false</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">hp.addDamages(49);</cell><cell bottom="minor" right="minor"></cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(hp.getDamages());</cell><cell bottom="minor" right="minor">49</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(hp.repairBook());</cell><cell bottom="minor" right="minor">false</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">hp.addDamages(1);</cell><cell bottom="minor" right="minor"></cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell
bottom="minor" right="minor">System.out.println(hp.getDamages());</cell><cell bottom="minor" right="minor">50</cell></row>
      <row left="minor"> <cell bottom="minor" right="minor"></cell><cell bottom="minor" right="minor">System.out.println(hp.repairBook());</cell><cell bottom="minor" right="minor">true</cell></row>
      </tabular></table>

<activity label="classBook">
        <statement>
        <p>Write the class Book below with the appropriate instance variables, constructor, and methods described in main method and in the table above. </p>
        </statement>
        <program interactive="activecode" language="java">
            <code>
  public class Book
  {
      // write instance variable declarations here
     
      // write the constructor and other methods here
     
      public static void main(String[] args)
      {
          Book hp = new Book("Harry Potter", 150, true);
          System.out.println(hp.getNumPages());
          System.out.println(hp.getName());
          System.out.println(hp.isHardCover());
          System.out.println(hp.getDamages());
          System.out.println(hp.repairBook());
    
          hp.addDamages(49);
          System.out.println(hp.getDamages());
          System.out.println(hp.repairBook());
    
          hp.addDamages(1);
          System.out.println(hp.getDamages());
          System.out.println(hp.repairBook());
      }
    }
    </code><tests>
    import static org.junit.Assert.*;
    import org.junit.*;
    import java.io.*;
    public class RunestoneTests extends CodeTestHelper
    {
        public RunestoneTests()
        {
            super("Book");
        }
    
        @Test
        public void testMain()
        {
            String expected = "150\nHarry Potter\ntrue\n0\nfalse\n49\nfalse\n50\ntrue\n";
            String output = getMethodOutput("main");

            boolean passed = getResults(expected, output, "Checking main method output");
            assertTrue(passed);
        }
        @Test
        public void test2()
        {          
            String results = checkConstructor(3);
    
            boolean passed = getResults("pass", results, "Checking constructor with 3 parameters");
            assertTrue(passed);
        }
    
        @Test
        public void test3()
        {
            String actual = testPrivateInstanceVariables();
            String expected = "3 Private";
    
            boolean passed = getResults(expected, actual, "Checking declaration of instance variables");
            assertTrue(passed);
        }
        @Test
        public void test4() {
          boolean passed = checkCodeContains("public void addDamages(int", "Checking for public addDamages method with an int parameter");
         assertTrue(passed);
        }
        @Test
        public void test5() {
          boolean passed = checkCodeContains("public boolean repairBook()", "Checking for public repairBook method that returns a boolean");
         assertTrue(passed);
        }
        @Test
        public void test6() {
          boolean passed = checkCodeContains("public int getNumPages()", "Checking for public getNumPages method that returns an int");
         assertTrue(passed);
        }
      }
            </tests>
        </program>
    </activity>

    </subsection>

    <subsection xml:id="FRQ2practicePresent">
    <title>Present Class</title>
<p>
Write a class called Present that has the appropriate instance variables and methods described in the main method below.</p>
//below is the TestPresent Class
//use this class to give you hints at what 
//methods should be in your Present class

import java.util.Scanner;

public class TestPresent
{
    public static void main(String[] args)
    {
        Scanner scan = new Scanner(System.in);

        //prompts the user to enter name of occasion
        System.out.print("Enter the occasion: ");
        String occasion = scan.nextLine();

        //creates a present object
        Present gift = new Present(49.99, "legos");

        //prints out the gift type and cost by calling two methods
        System.out.println("The gift is " + gift.getName() + ", and it costs $" + gift.getPrice() );
        
        System.out.println("The reaction when opening the gift was " + gift.reaction() );
        
        gift.purchasedAt("local store");
    } 
}

<activity label="classPresent">
        <statement>
        <p>Write the class Present below with the appropriate instance variables, constructor, and methods described in main method in the TestPresent class. </p>
        </statement>
        <program interactive="activecode" language="java">
            <code>
import java.util.Scanner;
class Present
{
    // Write the instance variables here

    // Write the constructor here

    // Write the methods here
  
  
  
}
//below is the TestPresent Class
//use this class to give you hints at what 
//methods should be in your Present class
public class TestPresent
{
    public static void main(String[] args)
    {
        Scanner scan = new Scanner(System.in);

        //prompts the user to enter name of occasion
        System.out.print("Enter the occasion: ");
        String occasion = scan.nextLine();

        //creates a present object
        Present gift = new Present(49.99, "legos");

        //prints out the gift type and cost by calling two methods
        System.out.println("The gift is " + gift.getName() + ", and it costs $" + gift.getPrice() );
        
        System.out.println("The reaction when opening the gift was " + gift.reaction() );
        
        gift.purchasedAt("local store");
    } 
}
</code>
<stdin>Birthday</stdin><tests>
    import static org.junit.Assert.*; 
    import org.junit.*;
    import java.io.*;
    public class RunestoneTests extends CodeTestHelper
    {
        public RunestoneTests()
        {
            super("Present");
        }
    
        @Test
        public void testMain()
        {
            String expected = "Enter the occassion: \nThe gift is legos, and it costs $49.99\nThe reaction when opening the gift was Wow!\nPurchased at local store\n";
            String output = getMethodOutput("main");

            boolean passed = getResults(expected, output, "Checking main method output", true);
            assertTrue(passed);
        }
        @Test
        public void test2()
        {          
            String results = checkConstructor(2);
    
            boolean passed = getResults("pass", results, "Checking constructor with 2 parameters");
            assertTrue(passed);
        }
    
        @Test
        public void test3()
        {
            String actual = testPrivateInstanceVariables();
            String expected = "2 Private";
    
            boolean passed = getResults(expected, actual, "Checking declaration of instance variables");
            assertTrue(passed);
        }
        @Test
        public void test4() {
          boolean passed = checkCodeContains("public String getName()", "Checking for public getName method that returns a String");
         assertTrue(passed);
        }
        @Test
        public void test5() {
          boolean passed = checkCodeContains("public double getPrice()", "Checking for public getPrice method that returns a double");
         assertTrue(passed);
        }
        @Test
        public void test6() {
          boolean passed = checkCodeContains("public String reaction()", "Checking for public reaction method that returns a String");
         assertTrue(passed);
        }
        @Test
        public void test7() {
          boolean passed = checkCodeContains("public void purchasedAt(String", "Checking for public purchasedAt method with a String parameter");
         assertTrue(passed);
        }
      }
            </tests>
        </program>
</activity>
    </subsection>
  </section>